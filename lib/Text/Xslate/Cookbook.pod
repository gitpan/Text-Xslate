
=head1 NAME

Text::Xslate::Cookbook - How to cook Xslate templates

=head1 DESCRIPTION

The Xslate cookbook is a set of recipes showing Xslate features.

=head1 RECIPES

=head2 How to manage HTML forms

Managing HTML forms is an important issue on web applications.
you'd better to use modules that manage HTML forms, rather than do something
with templates by yourself. Basically there are two basic solutions in
Xslate: use of FillInForm or HTML form builders.

In both solutions, one should not use the C<mark_raw> filter in templates
because of its B<security risks>. Instead, application code should be
responsible for it.

=head3 Using FillInForm

One solution to manage HTML forms is to use FillInForm modules with
the block filter syntax and the C<raw> filter.

Example code using C<HTML::FillInForm>:

    #!perl -w
    use strict;
    use Text::Xslate qw(mark_raw);
    use HTML::FillInForm;

    sub fillinform {
        my($q) = @_;

        return sub {
            my($html) = @_;
            return mark_raw(HTML::FillInForm->fill(\$html, $q));
        };
    }

    my $tx  = Text::Xslate->new(
        function => {
            fillinform => \&fillinform,
        },
    );

    my %vars = (
        q => { foo => "<filled value>" },
    );
    print $tx->render_string(<<'T', \%vars);
    FillInForm:
    : block form | fillinform($q) -> {
    <form>
    <input type="text" name="foo" />
    </form>
    : }
    T

Output:

    FillInForm:
    <form>
    <input type="text" name="foo" value="&lt;filled value&gt;" />
    </form>

See also L<HTML::FillInForm> or L<HTML::FillInForm::Lite> for details.

=head3 Using HTML form builders

Another solution to manage HTML forms is to use form builders.

Example code using C<HTML::Shakan>:

    #!psgi
    use strict;
    use Text::Xslate qw(mark_raw);
    use HTML::Shakan;
    use Plack::Request;

    my $tx = Text::Xslate->new();

    sub app {
        my($env) = @_;
        my $req  = Plack::Request->new($env);

        my $shakan = HTML::Shakan->new(
            request => $req,
            fields  => [ TextField(name => 'name', label => 'Your name: ') ],
        );

        my $res = $req->new_response(200);

        my $form = mark_raw($shakan->render());
        $res->body( $tx->render_string(<<'T', { form => $form }) );
    <!doctype html>
    <html>
    <head><title>Building form</title></head>
    <body>
    <form>
    <p>
    Form:<br />
    <: $form :>
    </p>
    </body>
    </html>
    T
        return $res->finalize();

    }

    return \&app;

Output:

    <!doctype html>
    <html>
    <head><title>Building form</title></head>
    <body>
    <form>
    <p>
    Form:<br />
    <label for="id_name">Your name</label>
    <input id="id_name" name="name" type="text" value="&lt;Xslate&gt;" />
    </p>
    </body>
    </html>

See also L<HTML::Shakan> for details.

=head2 How to apply uri escape to template expressions

Use C<URI::Escape> or C<URI::Escape::XS>.

Code using C<URI::Escape>:

    #!perl -w
    use strict;
    use Text::Xslate;

    my $tx  = Text::Xslate->new(
        module => ['URI::Escape'],
    );

    print $tx->render_string(<<'T', { app_param => "foo & bar" });
    <a href="http://example.com/app/<:
        $app_param | uri_escape_utf8 :>">something</a>
    T

Output:

    <a href="http://example.com/app/foo%20%26%20bar">something</a>

See also L<URI::Escape> or L<URI::Escape::XS>.

=head2 How to use Template Toolkit's WRAPPER feature in Kolon

Use template cascading, which is a super-set of the C<WRAPPER> directive.

F<wrapper.tx>:

    <div class="wrapper">
    block content -> { }
    </div>

F<content.tx>

    : cascade wrapper

    : override content -> {
        Hello, world!
    : }

Output:

    <div class="wrapper">
        Hello, world!
    </div>

=head1 SEE ALSO

L<Text::Xslate>

=cut
